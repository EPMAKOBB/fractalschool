// src/app/a d m i n/page.tsx

"use client";

import { useState, useEffect } from "react";
import { supabase } from "../../lib/supabase";

type Column = {
  column_name: string;
  data_type: string;
  is_nullable?: string;
  column_default?: string;
};

const TABLES = [
  { name: "inf-ege", label: "Задачи ЕГЭ Информатика" },
  { name: "tasks_meta", label: "Шаблоны задач" },
];

export default function AdminPage() {
  const [selectedTable, setSelectedTable] = useState<string>(TABLES[0].name);
  const [columns, setColumns] = useState<Column[]>([]);
  const [rows, setRows] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [newRow, setNewRow] = useState<any>({});
  const [editRowId, setEditRowId] = useState<number | null>(null);
  const [editRow, setEditRow] = useState<any>({});

  useEffect(() => {
    async function loadColumns() {
      const { data, error } = await supabase.rpc("get_table_columns", { tbl: selectedTable });
      setColumns(error ? [] : data ?? []);
    }
    loadColumns();
    setNewRow({});
    setEditRowId(null);
    setEditRow({});
  }, [selectedTable]);

  useEffect(() => {
    async function fetchRows() {
      setLoading(true);
      const { data, error } = await supabase.from(selectedTable).select("*");
      setRows(error ? [] : data ?? []);
      setLoading(false);
    }
    fetchRows();
  }, [selectedTable]);

  const handleAddRow = async (e: React.FormEvent) => {
    e.preventDefault();
    const filteredRow = Object.fromEntries(
      Object.entries(newRow).filter(([key, v]) => v !== "" && key !== "id" && key !== "created_at")
    );
    const { error } = await supabase.from(selectedTable).insert([filteredRow]);
    if (!error) {
      setNewRow({});
      const { data } = await supabase.from(selectedTable).select("*");
      setRows(data ?? []);
    } else {
      alert(error.message);
    }
  };

  const handleDeleteRow = async (id: number) => {
    await supabase.from(selectedTable).delete().eq("id", id);
    const { data } = await supabase.from(selectedTable).select("*");
    setRows(data ?? []);
  };

  const handleEditStart = (row: any) => {
    setEditRowId(row.id);
    setEditRow(row);
  };

  const handleEditSave = async (id: number) => {
    const filteredRow = Object.fromEntries(
      Object.entries(editRow).filter(([_, v]) => v !== "")
    );
    await supabase.from(selectedTable).update(filteredRow).eq("id", id);
    setEditRowId(null);
    setEditRow({});
    const { data } = await supabase.from(selectedTable).select("*");
    setRows(data ?? []);
  };

  const handleEditCancel = () => {
    setEditRowId(null);
    setEditRow({});
  };

  return (
    <>
      {/* Центрированная форма админки */}
      <main className="max-w-4xl mx-auto p-6">
        <h2 className="text-xl font-bold mb-4">Админ-панель</h2>
        <div className="mb-4">
          <label className="mr-2 font-semibold">Выберите таблицу:</label>
          <select
            className="border rounded p-2"
            value={selectedTable}
            onChange={e => setSelectedTable(e.target.value)}
          >
            {TABLES.map(t => (
              <option key={t.name} value={t.name}>
                {t.label}
              </option>
            ))}
          </select>
        </div>
        {/* Форма для добавления новой записи */}
        <form onSubmit={handleAddRow} className="mb-6 flex flex-wrap gap-2 items-end">
          {columns.map(col => (
            <div key={col.column_name} className="flex flex-col">
              <label className="text-xs">{col.column_name}</label>
              {col.column_name === "statement" || col.column_name === "solution" ? (
                <textarea
                  className="border rounded p-1 resize-y min-h-[80px]"
                  value={newRow[col.column_name] || ""}
                  onChange={e => setNewRow({ ...newRow, [col.column_name]: e.target.value })}
                  placeholder={col.column_name}
                  disabled={col.column_name === "id" || col.column_name === "created_at"}
                />
              ) : (
                <input
                  className="border rounded p-1"
                  type="text"
                  value={newRow[col.column_name] || ""}
                  onChange={e => setNewRow({ ...newRow, [col.column_name]: e.target.value })}
                  placeholder={col.column_name}
                  disabled={col.column_name === "id" || col.column_name === "created_at"}
                />
              )}
            </div>
          ))}
          <button type="submit" className="px-3 py-1 rounded bg-green-700 text-white hover:bg-green-800">
            Добавить
          </button>
        </form>
      </main>

      {/* Таблица на всю ширину экрана */}
      <div
        className="w-screen px-6 mt-6"
        style={{
          position: "relative",
          left: "50%",
          right: "50%",
          marginLeft: "-50vw",
          marginRight: "-50vw"
        }}
      >
        <div className="overflow-x-auto">
          {loading ? (
            <div>Загрузка...</div>
          ) : (
            <table className="w-full border-collapse mb-8">
              <thead>
                <tr>
                  {columns.map(col => (
                    <th key={col.column_name} className="p-2 border">
                      {col.column_name}
                    </th>
                  ))}
                  <th className="p-2 border">Действия</th>
                </tr>
              </thead>
              <tbody>
                {rows.map((row, i) => (
                  <tr key={row.id || i} className="border-b">
                    {columns.map(col => (
                      <td key={col.column_name} className="p-2 border">
                        {editRowId === row.id ? (
                          col.column_name === "statement" || col.column_name === "solution" ? (
                            <textarea
                              className="border rounded p-1 w-full resize-y min-h-[80px]"
                              value={editRow[col.column_name] ?? ""}
                              onChange={e =>
                                setEditRow({ ...editRow, [col.column_name]: e.target.value })
                              }
                              placeholder={col.column_name}
                              disabled={col.column_name === "id"}
                            />
                          ) : (
                            <input
                              className="border rounded p-1 w-full"
                              type="text"
                              value={editRow[col.column_name] ?? ""}
                              onChange={e =>
                                setEditRow({ ...editRow, [col.column_name]: e.target.value })
                              }
                              placeholder={col.column_name}
                              disabled={col.column_name === "id"}
                            />
                          )
                        ) : typeof row[col.column_name] === "object" ? (
                          JSON.stringify(row[col.column_name])
                        ) : (
                          String(row[col.column_name] ?? "")
                        )}
                      </td>
                    ))}
                    <td className="p-2 border whitespace-nowrap">
                      {editRowId === row.id ? (
                        <>
                          <button
                            className="text-green-700 hover:underline mr-2"
                            onClick={() => handleEditSave(row.id)}
                          >
                            Сохранить
                          </button>
                          <button
                            className="text-gray-500 hover:underline"
                            onClick={handleEditCancel}
                          >
                            Отмена
                          </button>
                        </>
                      ) : (
                        <>
                          <button
                            className="text-blue-700 hover:underline mr-2"
                            onClick={() => handleEditStart(row)}
                          >
                            Редактировать
                          </button>
                          <button
                            className="text-red-700 hover:underline"
                            onClick={() => handleDeleteRow(row.id)}
                          >
                            Удалить
                          </button>
                        </>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </>
  );
}
